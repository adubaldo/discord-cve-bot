"""
CVEs Discord Bot
"""
#!/usr/bin/python3
import requests
import json
import datetime
import subprocess
import time
import threading
from requests_toolbelt.threaded import pool
from datetime import date, timedelta

# cves/1.0?modStartDate=2019-01-01 T00:00:00:000 UTC05:00&includeMatchStringChange=true
# cves/1.0?cvssV2Severity=HIGH
NIST_API_BASE_URL = 'https://services.nvd.nist.gov/rest/json/cves/1.0?'

# 8 days before today
nist_rss = 'https://nvd.nist.gov/feeds/xml/cve/misc/nvd-rss.xml'
nist_rss_analyzed = 'https://nvd.nist.gov/feeds/xml/cve/misc/nvd-rss-analyzed.xml'

# nist api endpoint
nist_url = "https://services.nvd.nist.gov/rest/json/cve/1.0/"

# Discord Webhooks
webhooks = {  
      #'myserver.cve-feed':'https://discord.com/api/webhooks/<webhook here>'
}

# Discord Message data structure
data = {
    "content": "",
    "username": "CVE Today",
    "embeds": [{
        "author": {
            "name": "CVE Nist API",
                    "url": "",
                    "icon_url": "https://www.first.org/cvss/identity/cvss_web.png"
        },
        "description": "Latest Critical vulnerabilities",
        "title": "Daily update " + datetime.datetime.now().strftime('%d/%m/%Y %H:%M'),
        "fields": [],
        "color": 16711680,  # red:16711680, #green 48954, #yellow 15258703
    }]
}

# MultiThreading Requests
def multi_requests(urls):
    x = []
    p = pool.Pool.from_urls(urls)
    p.join_all()
    for response in p.responses():
        x.append(json.loads(response.content))
        print('GET {0}. Returned {1}.'.format(response.request_kwargs['url'], response.status_code))
    
    return x

def parse(cve_queries):
    counter = 0
    json_responses = multi_requests(cve_queries)
    for cve in json_responses:
        cve_data = nist_query(cve)     
        cve_id = cve_data['cve']
        score = float(cve_data['cvss'])        
        emoji = ':o:'
        publish = cve_data['publishedDate']
        description = cve_data['summary']
        vector = cve_data['cvss-vector']
        if score > 8.9:
            data["embeds"][0]["fields"].append({
                "name": '{} {}'.format(emoji,cve_id),
                        'inline': True,                        
                        'value': '**score:** {}\n'
                        '**created:** {}\n'
                        '**brief:** {}'
                        '\n[details...](https://nvd.nist.gov/vuln/detail/{})'.format(score, publish, description,cve_id),
            })
            counter += 1

    # full_text(cve_queries)    
    data["embeds"][0]["description"] += ' (**{}**)'.format(counter)
    update_bot(data)

# NIST Search Latest Critical CVE
def nist_search():
    
    multi_threading_cve_queries = []
    print('DATE: ', datetime.datetime.now().strftime('%y/%M/%Y %H:%M:%S:%f %z'))
    response = requests.get(NIST_API_BASE_URL+"cvssV3Severity=CRITICAL&resultsPerPage=20", headers={'Content-Type':'application/json'}).json() 
    for cve_item in response['result']['CVE_Items']:
        multi_threading_cve_queries.append(nist_url + cve_item['cve']['CVE_data_meta']['ID'])
    
    parse(multi_threading_cve_queries)


# Send data to Discord Server(s) via Webhooks
def update_bot(data):
    for server,webhook_url in webhooks.items():
        try:
            result = requests.post(webhook_url, json=data)
            result.raise_for_status()
        except requests.exceptions.HTTPError as err:
            print(err)

# Curcl CVE query (not used due to CVSSv2)
def curcl_query(cve):
    #print(cve)
    text = '0.0'
    data = {'cve':'','summary':'','cvss':'0.0','cvss-vector':''}
    if cve and cve['impact'] != {}:
        #text = r['result']['CVE_Items'][0]['cve']['description']['description_data'][0]['value']
        if 'cvss' in cve:
            data = {
                'cve': cve['id'],
                'summary': cve['summary'][:150]+'...',
                'cvss': cve['cvss'],
                'cvss-vector': cve['cvss-vector']
            }

    return data

# NIST CVE data parsing
def nist_query(res):
    score = '0.0'
    d = {'cve':'','summary':'','cvss':'0.0','cvss-vector':'', 'publishedDate':''}
    cve_data = res['result']['CVE_Items'][0]
    cve_id = cve_data['cve']['CVE_data_meta']['ID']
    
    if 'impact' in cve_data:        
        cve_impact = cve_data['impact']['baseMetricV3']['cvssV3']
        score = cve_impact['baseScore']  
        date = cve_data['publishedDate']
        vector = cve_impact['vectorString']
        description = cve_data['cve']['description']['description_data'][0]['value']
        d = {
            'cve': cve_id,
            'summary':  description[:100]+'...',
            'cvss': score,
            'cvss-vector': vector,
            'publishedDate': date
        }
    
    print(cve_id, score)
    return d

if __name__ == "__main__":
    nist_search()
